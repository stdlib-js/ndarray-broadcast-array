{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isCollection from '@stdlib/assert-is-collection';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport copy from '@stdlib/array-base-copy-indexed';\nimport getDType from '@stdlib/ndarray-dtype';\nimport getShape from '@stdlib/ndarray-shape';\nimport getStrides from '@stdlib/ndarray-strides';\nimport getOffset from '@stdlib/ndarray-offset';\nimport getOrder from '@stdlib/ndarray-order';\nimport getData from '@stdlib/ndarray-data-buffer';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Broadcasts an ndarray to a specified shape.\n*\n* ## Notes\n*\n* -   The returned array is a **read-only** view on the input array data buffer. The view is typically **not** contiguous. As more than one element of a returned view may refer to the same memory location, writing to the input array may affect multiple elements. If you need to write to the input array, copy the input array before broadcasting.\n*\n* @param {ndarray} x - input array\n* @param {NonNegativeIntegerArray} shape - desired shape\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} second argument must be an array of nonnegative integers\n* @throws {Error} input array cannot have more dimensions than the desired shape\n* @throws {Error} input array dimension sizes must be `1` or equal to the corresponding dimension in the provided shape\n* @throws {Error} input array and desired shape must be broadcast compatible\n* @returns {ndarray} broadcasted array\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = broadcastArray( x, [ 3, 2, 2 ] );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 1\n*\n* v = y.get( 1, 1, 0 );\n* // returns 3\n*\n* v = y.get( 2, 0, 0 );\n* // returns 1\n*\n* v = y.get( 2, 1, 1 );\n* // returns 4\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var y = broadcastArray( x, [ 3, 2 ] );\n* // throws <Error>\n*/\nfunction broadcastArray( x, shape ) {\n\tvar strides;\n\tvar dim;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar M;\n\tvar d;\n\tvar i;\n\tvar j;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tN = shape.length;\n\tsh = getShape( x );\n\tM = sh.length;\n\tif ( N < M ) {\n\t\tthrow new Error( 'invalid argument. Cannot broadcast an array to a shape having fewer dimensions. Arrays can only be broadcasted to shapes having the same or more dimensions.' );\n\t}\n\t// Initialize a strides array...\n\tstrides = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tstrides.push( 0 );\n\t}\n\t// Determine the output array strides...\n\tst = getStrides( x );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\tj = M - N + i;\n\t\tif ( j < 0 ) {\n\t\t\t// Prepended singleton dimension; stride is zero...\n\t\t\tcontinue;\n\t\t}\n\t\td = sh[ j ];\n\t\tdim = shape[ i ];\n\t\tif ( !isNonNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of nonnegative integers. Value: `%s`.', '[' + shape.join( ',' ) + ']' ) );\n\t\t}\n\t\tif ( dim !== 0 && dim < d ) {\n\t\t\tthrow new Error( format( 'invalid argument. Input array cannot be broadcast to the specified shape, as the specified shape has a dimension whose size is less than the size of the corresponding dimension in the input array. Array shape: (%s). Desired shape: (%s). Dimension: %u.', copy( sh ).join( ', ' ), copy( shape ).join( ', ' ), i ) );\n\t\t}\n\t\tif ( d === dim ) {\n\t\t\tstrides[ i ] = st[ j ];\n\t\t} else if ( d === 1 ) {\n\t\t\t// In order to broadcast dimensions, we set the stride for that dimension to zero...\n\t\t\tstrides[ i ] = 0;\n\t\t} else {\n\t\t\t// At this point, we know that `dim > d` and that `d` does not equal `1` (e.g., `dim=3` and `d=2`); in which case, the shapes are considered incompatible (even for desired shapes which are multiples of array dimensions, as might be desired when \"tiling\" an array; e.g., `dim=4` and `d=2`)...\n\t\t\tthrow new Error( format( 'invalid argument. Input array and the specified shape are broadcast incompatible. Array shape: (%s). Desired shape: (%s). Dimension: %u.', copy( sh ).join( ', ' ), copy( shape ).join( ', ' ), i ) );\n\t\t}\n\t}\n\treturn new x.constructor( getDType( x ), getData( x ), copy( shape ), strides, getOffset( x ), getOrder( x ), { // eslint-disable-line max-len\n\t\t'readonly': true\n\t});\n}\n\n\n// EXPORTS //\n\nexport default broadcastArray;\n"],"names":["broadcastArray","x","shape","strides","dim","sh","st","N","M","d","i","j","isndarrayLike","TypeError","format","isCollection","length","getShape","Error","push","getStrides","isNonNegativeInteger","join","copy","constructor","getDType","getData","getOffset","getOrder","readonly"],"mappings":";;g+BA+FA,SAASA,EAAgBC,EAAGC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAeX,GACpB,MAAM,IAAIY,UAAWC,EAAQ,oEAAqEb,IAEnG,IAAMc,EAAcb,GACnB,MAAM,IAAIW,UAAWC,EAAQ,2FAA4FZ,IAK1H,IAHAK,EAAIL,EAAMc,SAEVR,GADAH,EAAKY,EAAUhB,IACRe,QAEN,MAAM,IAAIE,MAAO,gKAIlB,IADAf,EAAU,GACJO,EAAI,EAAGA,EAAIH,EAAGG,IACnBP,EAAQgB,KAAM,GAIf,IADAb,EAAKc,EAAYnB,GACXS,EAAIH,EAAE,EAAGG,GAAK,EAAGA,IAEtB,MADAC,EAAIH,EAAID,EAAIG,GACH,GAAT,CAMA,GAFAD,EAAIJ,EAAIM,GACRP,EAAMF,EAAOQ,IACPW,EAAsBjB,GAC3B,MAAM,IAAIS,UAAWC,EAAQ,2FAA4F,IAAMZ,EAAMoB,KAAM,KAAQ,MAEpJ,GAAa,IAARlB,GAAaA,EAAMK,EACvB,MAAM,IAAIS,MAAOJ,EAAQ,8PAA+PS,EAAMlB,GAAKiB,KAAM,MAAQC,EAAMrB,GAAQoB,KAAM,MAAQZ,IAE9U,GAAKD,IAAML,EACVD,EAASO,GAAMJ,EAAIK,OACb,IAAW,IAANF,EAKX,MAAM,IAAIS,MAAOJ,EAAQ,2IAA4IS,EAAMlB,GAAKiB,KAAM,MAAQC,EAAMrB,GAAQoB,KAAM,MAAQZ,IAH1NP,EAASO,GAAM,CAIf,CAjBA,CAmBF,OAAO,IAAIT,EAAEuB,YAAaC,EAAUxB,GAAKyB,EAASzB,GAAKsB,EAAMrB,GAASC,EAASwB,EAAW1B,GAAK2B,EAAU3B,GAAK,CAC7G4B,UAAY,GAEd"}